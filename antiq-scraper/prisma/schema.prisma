generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Business {
  id              String           @id @default(uuid())
  userId          String? // Reference to the User ID from the other database
  placeId         String           @unique
  name            String
  description     String?
  isSpendingOnAds Boolean          @default(false)
  reviewCount     Int
  averageRating   Float
  website         String?
  featuredImage   String?
  mainCategory    String?
  categories      String[]
  workdayTiming   String?
  closedOn        String[]
  phone           String?
  address         String?
  detailedReviews DetailedReview[]
  widgets         Widget[] // Add this line to create a one-to-many relation
  // ... other fields you might have for the Business model
}

model DetailedReview {
  id                              String    @id @default(uuid())
  userId                          String? // Reference to the User ID from the other database
  businessId                      String
  business                        Business  @relation(fields: [businessId], references: [id])
  reviewId                        String    @unique
  reviewerName                    String
  rating                          Int
  reviewText                      String?
  publishedAt                     DateTime
  responseFromOwnerText           String?
  responseFromOwnerDate           DateTime?
  reviewLikesCount                Int       @default(0)
  totalNumberOfReviewsByReviewer  Int       @default(0)
  totalNumberOfPhotosByReviewer   Int? // Nullable if not always provided
  reviewerUrl                     String?
  isLocalGuide                    Boolean   @default(false)
  reviewTranslatedText            String?
  responseFromOwnerTranslatedText String?
  // ... other fields you might have for the DetailedReview model
}

model Widget {
  id          String   @id @default(uuid())
  createdAt   DateTime @default(now()) // Tracks when the record was created
  updatedAt   DateTime @updatedAt // Tracks when the record was last updated
  businessId  String   // Foreign key for the Business model
  business    Business @relation(fields: [businessId], references: [id])
  userId      String?  // Optional reference to the User ID (if the widget is associated with a user)
  name        String   // Name of the widget
  code        String   // A unique code for the widget
  settings    String   // JSON string or other settings related to the widget
  viewCount   Int      // Number of views (converted to Int)
  clickCount  Int      // Number of clicks (converted to Int)
}
